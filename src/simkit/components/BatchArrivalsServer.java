package simkit.components;

import static simkit.Priority.HIGH;
import simkit.SimEntityBase;
import simkit.random.DiscreteRandomVariate;
import simkit.random.RandomVariate;

/**
 * Each Arrival brings a batch of customers, quantity of which is generated from
 * a discrete probability distribution.
 *
 * @author ahbuss
 */
public class BatchArrivalsServer extends SimEntityBase {

    /**
     * # servers
     */
    private int totalNumberServers;

    /**
     * Generates service times
     */
    private RandomVariate serviceTimeGenerator;

    /**
     * Generates quantities in each batch.
     */
    private DiscreteRandomVariate batchGenerator;

    /**
     * # in queue
     */
    protected int numberInQueue;

    /**
     * # available servers
     */
    protected int numberAvailableServers;

    /**
     * Zero-argument constructor
     */
    public BatchArrivalsServer() {
    }

    /**
     * Instantiate a BatchArrivalsServer with the given parameters.
     *
     * @param totalNumberServers Given # of servers
     * @param serviceTimeGenerator Given generator of service times
     * @param batchGenerator Given generator of batch sizes
     */
    public BatchArrivalsServer(int totalNumberServers, RandomVariate serviceTimeGenerator,
            DiscreteRandomVariate batchGenerator) {
        setTotalNumberServers(totalNumberServers);
        setServiceTimeGenerator(serviceTimeGenerator);
        setBatchGenerator(batchGenerator);
    }

    /**
     * Set numberInQueue to 0, numberAvailableServers to totalNumberServers
     */
    @Override
    public void reset() {
        super.reset();
        numberInQueue = 0;
        numberAvailableServers = getTotalNumberServers();
    }

    /**
     * Only firing property changes
     */
    public void doRun() {
        firePropertyChange("numberInQueue", getNumberInQueue());
        firePropertyChange("numberAvailableServers", getNumberAvailableServers());
    }

    /**
     * Increment numberInQuieue by the size of the batch<br>
     * If available server, schedule StartService with delay of 0.0
     */
    public void doArrival() {
        int oldNumberInQueue = getNumberInQueue();
        numberInQueue += batchGenerator.generateInt();
        firePropertyChange("numberInQueue", oldNumberInQueue, getNumberInQueue());

        if (getNumberAvailableServers() > 0) {
            waitDelay("StartService", 0.0, HIGH);
        }
    }

    /**
     * Decrement numberInQueue andnumberAvailableServers<br>
     * Schedule EndService with delay generated by serviceTimeGenerator<br>
     * If still customers in queue and available servers, schedule another
     * StartService
     *
     */
    public void doStartService() {
        int oldNumberInQueue = getNumberInQueue();
        numberInQueue -= 1;
        firePropertyChange("numberInQueue", oldNumberInQueue, getNumberInQueue());

        int oldNumberAvailableServers = getNumberAvailableServers();
        numberAvailableServers -= 1;
        firePropertyChange("numberAvailableServers", oldNumberAvailableServers, getNumberAvailableServers());

        waitDelay("EndService", serviceTimeGenerator);

        if (numberInQueue > 0 && numberAvailableServers > 0) {
            waitDelay("StartService", 0.0, HIGH);
        }
    }

    /**
     * Increment numberAvailableServers<br>
     * If customers in queue, schedule StartService
     */
    public void doEndService() {
        int oldNumberAvailableServers = getNumberAvailableServers();
        numberAvailableServers += 1;
        firePropertyChange("numberAvailableServers", oldNumberAvailableServers, getNumberAvailableServers());

        if (getNumberInQueue() > 0) {
            waitDelay("StartService", 0.0, HIGH);
        }
    }

    /**
     * @return the totalNumberServers
     */
    public int getTotalNumberServers() {
        return totalNumberServers;
    }

    /**
     * @param totalNumberServers the totalNumberServers to set
     * @throws IllegalArgumentException if totalNumberServers â‰¶ 0
     */
    public void setTotalNumberServers(int totalNumberServers) {
        if (totalNumberServers <= 0) {
            throw new IllegalArgumentException("totalNumberServers must be > 0: " + totalNumberServers);
        }
        this.totalNumberServers = totalNumberServers;
    }

    /**
     * @return the serviceTimeGenerator
     */
    public RandomVariate getServiceTimeGenerator() {
        return serviceTimeGenerator;
    }

    /**
     * @param serviceTimeGenerator the serviceTimeGenerator to set
     */
    public void setServiceTimeGenerator(RandomVariate serviceTimeGenerator) {
        this.serviceTimeGenerator = serviceTimeGenerator;
    }

    /**
     * @return the batchGenerator
     */
    public DiscreteRandomVariate getBatchGenerator() {
        return batchGenerator;
    }

    /**
     * @param batchGenerator the batchGenerator to set
     */
    public void setBatchGenerator(DiscreteRandomVariate batchGenerator) {
        this.batchGenerator = batchGenerator;
    }

    /**
     * @return the numberInQueue
     */
    public int getNumberInQueue() {
        return numberInQueue;
    }

    /**
     * @return the numberAvailableServers
     */
    public int getNumberAvailableServers() {
        return numberAvailableServers;
    }

}
